# Copyright (C) 2016 Olivier Goffart <ogoffart@woboq.com>
#
# You may use this file under the terms of the 3-clause BSD license.
# See the file LICENSE from this package for details.

# This is the clang-format configuration style to be used by Qt,
# based on the rules from https://wiki.qt.io/Qt_Coding_Style and
# https://wiki.qt.io/Coding_Conventions

# based on the Qt coding conventions starting clang format document, updated 
# for newer cxx versions and with other minor improvements

---
# Webkit style was loosely based on the Qt style
BasedOnStyle: WebKit

Standard: Latest

ColumnLimit: 110

# Disable reflow of some specific comments
# qdoc comments: indentation rules are different.
# Translation comments and SPDX license identifiers are also excluded.
CommentPragmas: "^!|^:|^ SPDX-License-Identifier:"
ReflowComments: 'false'

# We want a space between the type and the star for pointer types.
PointerBindsToType: false

# We use template< without space.
SpaceAfterTemplateKeyword: true

# We want to break before the operators, but not before a '='.
BreakBeforeBinaryOperators: NonAssignment
BreakBeforeTernaryOperators: 'false'
BreakStringLiterals: 'false'

# Break constructor initializers before the colon and after the commas.
BreakConstructorInitializers: BeforeColon

# Braces are usually attached, but not after functions or class declarations.
BreakBeforeBraces: Custom
BraceWrapping:
    AfterClass: true
    AfterControlStatement: false
    AfterEnum: false
    AfterFunction: true
    AfterNamespace: false
    AfterObjCDeclaration: false
    AfterStruct: true
    AfterUnion: false
    BeforeCatch: false
    BeforeElse: false
    IndentBraces: false

# When constructor initializers do not fit on one line, put them each on a new line.
ConstructorInitializerAllOnOneLineOrOnePerLine: true
# Indent initializers by 4 spaces
ConstructorInitializerIndentWidth: 4

# Indent width for line continuations.
ContinuationIndentWidth: 8

# No indentation for namespaces.
NamespaceIndentation: All

# Allow indentation for preprocessing directives (if/ifdef/endif). https://reviews.llvm.org/rL312125
IndentPPDirectives: None

# Horizontally align arguments after an open bracket.
# The coding style does not specify the following, but this is what gives
# results closest to the existing code.
AlwaysBreakTemplateDeclarations: Yes
AlwaysBreakAfterReturnType: None
#BreakBeforeConceptDeclarations: Allowed

# Ideally we should also allow less short function in a single line, but
# clang-format does not handle that.
AllowShortFunctionsOnASingleLine: Inline
AllowAllArgumentsOnNextLine: 'false'
AllowShortEnumsOnASingleLine: 'false'
AllowAllParametersOfDeclarationOnNextLine: 'false'

PenaltyReturnTypeOnItsOwnLine: 10000
PenaltyExcessCharacter: 1
PenaltyBreakString: 100
PenaltyBreakComment: 10000
PenaltyBreakBeforeFirstCallParameter: 1000

AlignEscapedNewlines: DontAlign
AlignAfterOpenBracket: Align

BinPackArguments: 'false'
BinPackParameters: 'false'
ExperimentalAutoDetectBinPacking: 'false'

LambdaBodyIndentation: OuterScope
AllowShortLambdasOnASingleLine: Empty

# The coding style specifies some include order categories, but also tells to
# separate categories with an empty line. It does not specify the order within
# the categories. Since the SortInclude feature of clang-format does not
# re-order includes separated by empty lines, the feature is not used.
SortIncludes: false

# Avoids the addition of a space between an identifier and the
# initializer list in list-initialization.
SpaceBeforeCpp11BracedList: false
Cpp11BracedListStyle: 'true'

# macros for which the opening brace stays attached.
ForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH, forever, Q_FOREVER, QBENCHMARK, QBENCHMARK_ONCE ]

StatementAttributeLikeMacros: ['emit', 'Q_EMIT']
StatementMacros: ['Q_UNUSED']
# connect is here to allow us to decide formatting for QObject::connect parameters, which make sense several different ways depending on what is being connected
WhitespaceSensitiveMacros: ['Q_OBJECT', 'Q_PROPERTY', 'QT_VERSION_CHECK', 'Q_CLASSINFO', 'QML_ELEMENT', 'QML_SINGLETON', 'QML_NAMED_ELEMENT', 'QML_ANONYMOUS', 'QML_ATTACHED', 'QML_UNCREATABLE', 'Q_LOGGING_CATEGORY', 'Q_DECLARE_LOGGING_CATEGORY']
